@InitBinder：
1. Метод, идентифицированный @InitBinder, может инициализировать объект WebDataBinder.
WebDataBinder - это подкласс DataBinder, используемый для завершения привязки полей формы к свойствам JavaBean.

2. Метод @InitBinder не может иметь возвращаемого значения, он должен быть объявлен как void.

3. Параметром метода @InitBinder обычно является WebDataBinder.

Код теста:

/*
 * Не привязывать свойство lastName к объекту автоматически, обработайте его самостоятельно
 */
	@InitBinder
	public void initBinder(WebDataBinder binder){
		binder.setDisallowedFields("lastName");
	}
	если у вашего контроллера есть какие-либо публичные методы, аннотированные @InitBinder,, то эти методы будут вызываться контейнером непосредственно перед обработкой каждого запроса, передавая WebDataBinder, используемый фреймворком.

    Наиболее распространенная причина для этого - когда вы хотите настроить способ, которым Spring пытается привязать параметры запроса к вашей модели, например, если ваша модель имеет пользовательские типы данных, которые Spring не может обработать из коробки. Вы регистрируете свой PropertyEditors против WebDataBinder. Тривиальным примером может быть использование библиотеки JodaTime в вашей модели, и вы хотите привязать строки timestamp к объекту Joda DateTime.

    С Spring 2.0 вы должны переопределить защищенный метод initBinder() из суперкласса контроллера, но Spring 2.5 устраняет необходимость делать это, теперь вы можете просто использовать аннотации.
